// generated by https://transform.tools/json-schema-to-typescript from modelcard-v0.0.2.json

export type License =
  | {
      [k: string]: unknown;
    }
  | {
      [k: string]: unknown;
    };

/**
 * https://modelcards.withgoogle.com/
 */
export interface BaseModelCard {
  /**
   * The version of the schema.
   */
  schema_version?: string;
  /**
   * Metadata about the model.
   */
  model_details?: {
    /**
     * The name of the model.
     */
    name?: string;
    /**
     * A brief, one-line description of the model card.
     */
    overview?: string;
    /**
     * A thorough description of the model and its usage.
     */
    documentation?: string;
    /**
     * The individuals or teams who own the model.
     */
    owners?: Owner[];
    version?: Version;
    /**
     * The model's license for use.
     */
    licenses?: License[];
    /**
     * Links providing more information about the model.
     */
    references?: Reference[];
    /**
     * How to reference this model card.
     */
    citations?: Citation[];
    /**
     * The path where the model is stored.
     */
    path?: string;
    [k: string]: unknown;
  };
  /**
   * Parameters for construction of the model.
   */
  model_parameters?: {
    /**
     * The architecture of the model.
     */
    model_architecture?: string;
    /**
     * The datasets used to train and evaluate the model.
     */
    data?: Dataset[];
    /**
     * The data format for inputs to the model.
     */
    input_format?: string;
    /**
     * The data format for inputs to the model, in key-value format.
     */
    input_format_map?: Keyval[];
    /**
     * The data format for outputs from the model.
     */
    output_format?: string;
    /**
     * The data format for outputs from the model, in key-value format.
     */
    output_format_map?: Keyval[];
    [k: string]: unknown;
  };
  /**
   * A quantitative analysis of the model
   */
  quantitative_analysis?: {
    /**
     * The model performance metrics being reported.
     */
    performance_metrics?: PerformanceMetric[];
    graphics?: GraphicsCollection;
    [k: string]: unknown;
  };
  /**
   * What considerations should be taken into account regarding the model's construction, training, and application?
   */
  considerations?: {
    /**
     * Who are the intended users of the model?
     */
    users?: User[];
    /**
     * What are the intended use cases of the model?
     */
    use_cases?: UseCase[];
    /**
     * What are the known technical limitations of the model? E.g. What kind(s) of data should the model be expected not to perform well on? What are the factors that might degrade model performance?
     */
    limitations?: Limitation[];
    /**
     * What are the known tradeoffs in accuracy/performance of the model?
     */
    tradeoffs?: Tradeoff[];
    /**
     * What are the ethical (or environmental) risks involved in the application of this model?
     */
    ethical_considerations?: Risk[];
    [k: string]: unknown;
  };
}
export interface Owner {
  /**
   * The name of the owner.
   */
  name?: string;
  /**
   * The contact information of the owner.
   */
  contact?: string;
  [k: string]: unknown;
}
/**
 * The version of the model.
 */
export interface Version {
  /**
   * The name of the version.
   */
  name?: string;
  /**
   * The date the version was released.
   */
  date?: string;
  /**
   * The changes from the previous version.
   */
  diff?: string;
  [k: string]: unknown;
}
export interface Reference {
  /**
   * A reference to a resource.
   */
  reference?: string;
  [k: string]: unknown;
}
export interface Citation {
  /**
   * The citation style.
   */
  style?: string;
  /**
   * The citation itself.
   */
  citation?: string;
  [k: string]: unknown;
}
export interface Dataset {
  /**
   * The name of the dataset.
   */
  name?: string;
  /**
   * A link to the dataset.
   */
  link?: string;
  sensitive?: SensitiveData;
  graphics?: GraphicsCollection;
  /**
   * A description of the dataset. Can describe size of dataset, whether it's used for training, testing, or validation, etc.
   */
  description?: string;
  [k: string]: unknown;
}
export interface SensitiveData {
  /**
   * A description of any sensitive data in a dataset.
   */
  sensitive_data?: string[];
  [k: string]: unknown;
}
export interface GraphicsCollection {
  /**
   * A description of this collection of graphics.
   */
  description?: string;
  /**
   * A collection of graphics.
   */
  collection?: Graphic[];
  [k: string]: unknown;
}
export interface Graphic {
  /**
   * The name of the graphic.
   */
  name?: string;
  /**
   * The graphic, encoded as a base64 string.
   */
  image?: string;
  [k: string]: unknown;
}
export interface Keyval {
  /**
   * The key of a key-value pair.
   */
  key?: string;
  /**
   * The value of a key-value pair.
   */
  value?: string;
  [k: string]: unknown;
}
export interface PerformanceMetric {
  /**
   * The type of performance metric.
   */
  type?: string;
  /**
   * The value of the performance metric.
   */
  value?: string;
  /**
   * The name of the slice this metric was computed on. By default, assume this metric is not sliced.
   */
  slice?: string;
  /**
   * The confidence interval of the metric.
   */
  confidence_interval?: {
    /**
     * The lower bound of the confidence interval.
     */
    lower_bound?: string;
    /**
     * The upper bound of the confidence interval.
     */
    upper_bound?: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface User {
  /**
   * A description of the user.
   */
  description?: string;
  [k: string]: unknown;
}
export interface UseCase {
  /**
   * A description of the use case.
   */
  description?: string;
  [k: string]: unknown;
}
export interface Limitation {
  /**
   * A description of the limitation.
   */
  description?: string;
  [k: string]: unknown;
}
export interface Tradeoff {
  /**
   * A description of the tradeoff.
   */
  description?: string;
  [k: string]: unknown;
}
export interface Risk {
  /**
   * The name of the risk.
   */
  name?: string;
  /**
   * Strategy used to address this risk.
   */
  mitigation_strategy?: string;
  [k: string]: unknown;
}
