"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[50],{876:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=c(n),f=a,u=p["".concat(s,".").concat(f)]||p[f]||d[f]||o;return n?r.createElement(u,i(i({ref:t},m),{},{components:n})):r.createElement(u,i({ref:t},m))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3126:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7896),a=(n(2784),n(876));const o={title:"MLflow",description:"Instructions for setting up the integration of model card integration with the MLflow tracking server"},i=void 0,l={unversionedId:"integrations/mlflow",id:"integrations/mlflow",title:"MLflow",description:"Instructions for setting up the integration of model card integration with the MLflow tracking server",source:"@site/docs/integrations/mlflow.md",sourceDirName:"integrations",slug:"/integrations/mlflow",permalink:"/integrations/mlflow",draft:!1,tags:[],version:"current",frontMatter:{title:"MLflow",description:"Instructions for setting up the integration of model card integration with the MLflow tracking server"},sidebar:"tutorialSidebar",previous:{title:"Integrations",permalink:"/category/integrations"},next:{title:"Reference",permalink:"/category/reference"}},s={},c=[{value:"Architecture",id:"architecture",level:2},{value:"MLflow tracking server instance",id:"mlflow-tracking-server-instance",level:2},{value:"Run local test server",id:"run-local-test-server",level:3},{value:"MLflow project configuration",id:"mlflow-project-configuration",level:2},{value:"Configure secrets",id:"configure-secrets",level:3},{value:"Create workflow",id:"create-workflow",level:3},{value:"Enhancing the experiment run artifacts",id:"enhancing-the-experiment-run-artifacts",level:3}],m={toc:c};function d(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"The integration is experimental.")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"The integration expects that the MLflow Tracking Server has the proxied artifact storage access ",(0,a.kt)("a",{parentName:"p",href:"https://www.mlflow.org/docs/latest/tracking.html#id32"},"enabled"),".")),(0,a.kt)("h2",{id:"architecture"},"Architecture"),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(4843).Z,width:"886",height:"738"})),(0,a.kt)("h2",{id:"mlflow-tracking-server-instance"},"MLflow tracking server instance"),(0,a.kt)("h3",{id:"run-local-test-server"},"Run local test server"),(0,a.kt)("p",null,"Using docker-compose is an effective way to start a MLflow tracking server. The example below is based on ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/sachua/mlflow-docker-compose"},"mlflow-docker-compose"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"web")," service command starts the tracking server with the proxied artifact storage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="docker-compose.yml"',title:'"docker-compose.yml"'},"version: '3.7'\n\nservices:\n  minio:\n    restart: always\n    image: minio/minio@sha256:d28c69eda85fb4c362d2a8976274da8f369398fc943b0c238c50722fd0c578c4\n    container_name: mlflow_s3\n    ports:\n      - '9000:9000'\n      - '9001:9001'\n    command: server /data --console-address ':9001' --address ':9000'\n    environment:\n      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}\n      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}\n    volumes:\n      - .cache/minio_data:/data\n\n  mc:\n    image: minio/mc@sha256:d281c2bfce56c727dc229643f8df99e24295fae586aaf6acb859eb2dd4c66ca4\n    depends_on:\n      - minio\n    container_name: mc\n    env_file:\n      - .env\n    entrypoint: >\n      /bin/sh -c \"\n      /tmp/wait-for-it.sh minio:9000 &&\n      /usr/bin/mc alias set minio http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} &&\n      /usr/bin/mc mb minio/mlflow;\n      exit 0;\n      \"\n    volumes:\n      - ./wait-for-it.sh:/tmp/wait-for-it.sh\n\n  db:\n    restart: always\n    image: mysql/mysql-server@sha256:fcbe88694872e88ae406bc69540211505eae922a182690d85be6af1a48e5ca0a\n    container_name: mlflow_db\n    ports:\n      - '3306:3306'\n    environment:\n      - MYSQL_DATABASE=${MYSQL_DATABASE}\n      - MYSQL_USER=${MYSQL_USER}\n      - MYSQL_PASSWORD=${MYSQL_PASSWORD}\n      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}\n    volumes:\n      - .cache/dbdata:/var/lib/mysql\n\n  web:\n    restart: always\n    build: ./mlflow\n    image: mlflow_server\n    container_name: mlflow_server\n    depends_on:\n      - mc\n      - db\n    ports:\n      - '5000:5000'\n    environment:\n      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000\n      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}\n      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}\n    # start the tracking server with proxied artifact storage\n    command: >\n      mlflow server \n        --backend-store-uri mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@db:3306/${MYSQL_DATABASE} \n        --artifacts-destination s3://mlflow/mlartifacts \n        --serve-artifacts \n        --host 0.0.0.0\n")),(0,a.kt)("p",null,"The local test server can be exposed with ",(0,a.kt)("a",{parentName:"p",href:"https://ngrok.com"},"ngrok"),", adding basic authentication:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"ngrok 5000 --bind-tls true --auth user:password\n")),(0,a.kt)("p",null,"The public url where the tracking server is available follows this format ",(0,a.kt)("inlineCode",{parentName:"p"},"https://{your-instance}.ngrok.io"),"."),(0,a.kt)("h2",{id:"mlflow-project-configuration"},"MLflow project configuration"),(0,a.kt)("p",null,"The MLflow project needs to be developed in a Git repository stored on GitHub."),(0,a.kt)("h3",{id:"configure-secrets"},"Configure secrets"),(0,a.kt)("p",null,"Add the MLflow tracking server as a GitHub secret:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-env"},"MLFLOW_TRACKING_URI=https://user:password@{your-instance}.ngrok.io\n")),(0,a.kt)("h3",{id:"create-workflow"},"Create workflow"),(0,a.kt)("p",null,"Add the following workflow to your GitHub repository. The integration with the MLflow tracking server is enabled by the ",(0,a.kt)("inlineCode",{parentName:"p"},"MLFLOW_TRACKING_URI")," environment variable."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".github/workflows/mlflow-integration.yml"',title:'".github/workflows/mlflow-integration.yml"'},"name: modelcard-test\n\non:\n  pull_request:\n    branches: [main]\n  workflow_dispatch:\n\njobs:\n  mlflow-modelcard:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout branch\n        uses: actions/checkout@v3\n\n      - name: Check for model card file\n        uses: CompliancePal/modelcard-action@mlflow-action-experiments\n        env:\n          MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}\n        with:\n          modelcard: modelcard.yaml\n")),(0,a.kt)("h3",{id:"enhancing-the-experiment-run-artifacts"},"Enhancing the experiment run artifacts"),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"modelcard-action")," adds the modelcard metadata document (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"modelcard.json"),") to the artifacts created during the tracked experiment run."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Modelcard metadata as artifact",src:n(4270).Z,width:"1429",height:"1006"})))}d.isMDXComponent=!0},4270:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/artifact-6d5f7a9446b895213f2cde2212a84cbd.png"},4843:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/sequence-416d2c8f6072833f6de382e558d6604e.svg"}}]);